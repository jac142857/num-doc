   <div class="col-md-9" id="content">
   
      
      <p>The Ethereum blockchain along with its two extension protocols Whisper and Swarm was
originally conceptualized to become the supporting pillar of web3, providing the
consensus, messaging and storage backbone for a new generation of distributed (actually,
decentralized) applications called DApps.</p>

<p>The first incarnation towards this dream of web3 was a command line client providing an
RPC interface into the peer-to-peer protocols. The client was soon enough extended with a
web-browser-like graphical user interface, permitting developers to write DApps based on
the tried and proven HTML/CSS/JS technologies.</p>

<p>As many DApps have more complex requirements than what a browser environment can handle,
it became apparent that providing programmatic access to the web3 pillars would open the
door towards a new class of applications. As such, the second incarnation of the web
dream is to open up all our technologies for other projects as reusable components.</p>

<p>Starting with the 1.5 release family of <code class="language-plaintext highlighter-rouge">go-ethereum</code>, we transitioned away from providing
only a full blown Ethereum client and started shipping official Go packages that could be
embedded into third party desktop and server applications. It took only a small leap from
here to begin porting our code to mobile platforms.</p>

<h2 id="quick-overview">Quick overview</h2>

<p>Similarly to our reusable Go libraries, the mobile wrappers also focus on four main usage
areas:</p>

<ul>
  <li>Simplified client side account management</li>
  <li>Remote node interfacing via different transports</li>
  <li>Contract interactions through auto-generated bindings</li>
  <li>In-process Ethereum, Whisper and Swarm peer-to-peer node</li>
</ul>

<p>You can watch a quick overview about these in Peter’s (@karalabe) talk titled “Import
Geth: Ethereum from Go and beyond”, presented at the Ethereum Devcon2 developer conference
in September, 2016 (Shanghai). Slides are <a href="https://ethereum.karalabe.com/talks/2016-devcon.html">available
here</a>.</p>

<p><a href="https://www.youtube.com/watch?v=R0Ia1U9Gxjg"><img src="./Mobile API _ Go Ethereum_files/0.jpg" alt="Peter&#39;s Devcon2 talk"></a></p>

<h2 id="library-bundles">Library bundles</h2>

<p>The <code class="language-plaintext highlighter-rouge">go-ethereum</code> mobile library is distributed either as an Android <code class="language-plaintext highlighter-rouge">.aar</code> archive
(containing binaries for <code class="language-plaintext highlighter-rouge">arm-7</code>, <code class="language-plaintext highlighter-rouge">arm64</code>, <code class="language-plaintext highlighter-rouge">x86</code> and <code class="language-plaintext highlighter-rouge">x64</code>); or as an iOS XCode framework
(containing binaries for <code class="language-plaintext highlighter-rouge">arm-7</code>, <code class="language-plaintext highlighter-rouge">arm64</code> and <code class="language-plaintext highlighter-rouge">x86</code>). We do not provide library bundles
for Windows phone the moment.</p>

<h3 id="android-archive">Android archive</h3>

<p>The simplest way to use <code class="language-plaintext highlighter-rouge">go-ethereum</code> in your Android project is through a Maven
dependency. We provide bundles of all our stable releases (starting from v1.5.0) through
Maven Central, and also provide the latest develop bundle through the Sonatype OSS
repository.</p>

<h4 id="stable-dependency-maven-central">Stable dependency (Maven Central)</h4>

<p>To add an Android dependency to the <strong>stable</strong> library release of <code class="language-plaintext highlighter-rouge">go-ethereum</code>, you’ll
need to ensure that the Maven Central repository is enabled in your Android project, and
that the <code class="language-plaintext highlighter-rouge">go-ethereum</code> code is listed as a required dependency of your application. You
can do both of these by editing the <code class="language-plaintext highlighter-rouge">build.gradle</code> script in your Android app’s folder:</p>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">repositories</span> <span class="o">{</span>
    <span class="n">mavenCentral</span><span class="o">()</span>
<span class="o">}</span>

<span class="k">dependencies</span> <span class="o">{</span>
    <span class="c1">// All your previous dependencies</span>
    <span class="n">compile</span> <span class="s1">'org.ethereum:geth:1.5.2'</span> <span class="c1">// Change the version to the latest release</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="develop-dependency-sonatype">Develop dependency (Sonatype)</h4>

<p>To add an Android dependency to the current version of <code class="language-plaintext highlighter-rouge">go-ethereum</code>, you’ll need to
ensure that the Sonatype snapshot repository is enabled in your Android project, and that
the <code class="language-plaintext highlighter-rouge">go-ethereum</code> code is listed as a required <code class="language-plaintext highlighter-rouge">SNAPSHOT</code> dependency of your application.
You can do both of these by editing the <code class="language-plaintext highlighter-rouge">build.gradle</code> script in your Android app’s
folder:</p>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">repositories</span> <span class="o">{</span>
    <span class="n">maven</span> <span class="o">{</span>
        <span class="n">url</span> <span class="s2">"https://oss.sonatype.org/content/groups/public"</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="k">dependencies</span> <span class="o">{</span>
    <span class="c1">// All your previous dependencies</span>
    <span class="n">compile</span> <span class="s1">'org.ethereum:geth:1.5.3-SNAPSHOT'</span> <span class="c1">// Change the version to the latest release</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="custom-dependency">Custom dependency</h4>

<p>If you prefer not to depend on Maven Central or Sonatype; or would like to access an older
develop build not available any more as an online dependency, you can download any bundle
directly from <a href="https://geth.ethereum.org/downloads/">our website</a> and insert it into your
project in Android Studio via <code class="language-plaintext highlighter-rouge">File -&gt; New -&gt; New module... -&gt; Import .JAR/.AAR Package</code>.</p>

<p>You will also need to configure <code class="language-plaintext highlighter-rouge">gradle</code> to link the mobile library bundle to your
application. This can be done by adding a new entry to the <code class="language-plaintext highlighter-rouge">dependencies</code> section of your
<code class="language-plaintext highlighter-rouge">build.gradle</code> script, pointing it to the module you just added (named <code class="language-plaintext highlighter-rouge">geth</code> by default).</p>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">dependencies</span> <span class="o">{</span>
    <span class="c1">// All your previous dependencies</span>
    <span class="n">compile</span> <span class="nf">project</span><span class="o">(</span><span class="s1">':geth'</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="manual-builds">Manual builds</h4>

<p>Lastly, if you would like to make modifications to the <code class="language-plaintext highlighter-rouge">go-ethereum</code> mobile code and/or
build it yourself locally instead of downloading a pre-built bundle, you can do so using a
<code class="language-plaintext highlighter-rouge">make</code> command. This will create an Android archive called <code class="language-plaintext highlighter-rouge">geth.aar</code> in the <code class="language-plaintext highlighter-rouge">build/bin</code>
folder that you can import into your Android Studio as described above.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>make android
<span class="o">[</span>...]
Done building.
Import <span class="s2">"build/bin/geth.aar"</span> to use the library.
</code></pre></div></div>

<h3 id="ios-framework">iOS framework</h3>

<p>The simplest way to use <code class="language-plaintext highlighter-rouge">go-ethereum</code> in your iOS project is through a
<a href="https://cocoapods.org/">CocoaPods</a> dependency. We provide bundles of all our stable
releases (starting from v1.5.3) and also latest develop versions.</p>

<h4 id="automatic-dependency">Automatic dependency</h4>

<p>To add an iOS dependency to the current stable or latest develop version of <code class="language-plaintext highlighter-rouge">go-ethereum</code>,
you’ll need to ensure that your iOS XCode project is configured to use CocoaPods.
Detailing that is out of scope in this document, but you can find a guide in the upstream
<a href="https://guides.cocoapods.org/using/using-cocoapods.html">Using CocoaPods</a> page.
Afterwards you can edit your <code class="language-plaintext highlighter-rouge">Podfile</code> to list <code class="language-plaintext highlighter-rouge">go-ethereum</code> as a dependency:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">target</span> <span class="s1">'MyApp'</span> <span class="k">do</span>
    <span class="c1"># All your previous dependencies</span>
    <span class="n">pod</span> <span class="s1">'Geth'</span><span class="p">,</span> <span class="s1">'1.5.4'</span> <span class="c1"># Change the version to the latest release</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Alternatively, if you’d like to use the latest develop version, replace the package
version <code class="language-plaintext highlighter-rouge">1.5.4</code> with <code class="language-plaintext highlighter-rouge">~&gt; 1.5.5-unstable</code> to switch to pre-releases and to always pull in
the latest bundle from a particular release family.</p>

<h4 id="custom-dependency-1">Custom dependency</h4>

<p>If you prefer not to depend on CocoaPods; or would like to access an older develop build
not available any more as an online dependency, you can download any bundle directly from
<a href="https://geth.ethereum.org/downloads/">our website</a> and insert it into your project in
XCode via <code class="language-plaintext highlighter-rouge">Project Settings -&gt; Build Phases -&gt; Link Binary With Libraries</code>.</p>

<p>Do not forget to extract the framework from the compressed <code class="language-plaintext highlighter-rouge">.tar.gz</code> archive. You can do
that either using a GUI tool or from the command line via (replace the archive with your
downloaded file):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tar -zxvf geth-ios-all-1.5.3-unstable-e05d35e6.tar.gz
</code></pre></div></div>

<h4 id="manual-builds-1">Manual builds</h4>

<p>Lastly, if you would like to make modifications to the <code class="language-plaintext highlighter-rouge">go-ethereum</code> mobile code and/or
build it yourself locally instead of downloading a pre-built bundle, you can do so using a
<code class="language-plaintext highlighter-rouge">make</code> command. This will create an iOS XCode framework called <code class="language-plaintext highlighter-rouge">Geth.framework</code> in the
<code class="language-plaintext highlighter-rouge">build/bin</code> folder that you can import into XCode as described above.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>make ios
<span class="o">[</span>...]
Done building.
Import <span class="s2">"build/bin/Geth.framework"</span> to use the library.
</code></pre></div></div>

    </div>